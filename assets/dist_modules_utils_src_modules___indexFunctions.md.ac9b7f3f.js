import{_ as s,o as e,c as a,Q as n}from"./chunks/framework.5be90078.js";const u=JSON.parse('{"title":"Module: utils/src/modules/__indexFunctions","description":"","frontmatter":{"prev":{"text":"数组（arrays）","link":"dist/modules/utils_src_modules___indexArrays"},"next":{"text":"语言（language）","link":"dist/modules/utils_src_modules___indexLanguage"}},"headers":[],"relativePath":"dist/modules/utils_src_modules___indexFunctions.md","filePath":"dist/modules/utils_src_modules___indexFunctions.md","lastUpdated":null}'),t={name:"dist/modules/utils_src_modules___indexFunctions.md"},l=n(`<h1 id="module-utils-src-modules-indexfunctions" tabindex="-1">Module: utils/src/modules/__indexFunctions <a class="header-anchor" href="#module-utils-src-modules-indexfunctions" aria-label="Permalink to &quot;Module: utils/src/modules/\\_\\_indexFunctions&quot;">​</a></h1><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="after" tabindex="-1">after <a class="header-anchor" href="#after" aria-label="Permalink to &quot;after&quot;">​</a></h3><p>▸ <strong>after</strong>(<code>n</code>, <code>func</code>): (<code>this</code>: <code>unknown</code>, ...<code>args</code>: <code>unknown</code>[]) =&gt; <code>any</code></p><p>返回一个函数，该函数被调用<code>n</code>或更多次之后将马上触发给定函数，调用时可传递参数，<code>before</code>的反函数。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">after</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(info)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;params...&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;params...&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> log </span><span style="color:#9ECBFF;">&#39;params...&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">after</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">info</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(info)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;params...&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;params...&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> log </span><span style="color:#032F62;">&#39;params...&#39;</span></span></code></pre></div><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>n</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">调用次数</td></tr><tr><td style="text-align:left;"><code>func</code></td><td style="text-align:left;"><a href="./../interfaces/types.Func.html"><code>Func</code></a>&lt;<code>any</code>&gt;</td><td style="text-align:left;">给定函数</td></tr></tbody></table><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (<code>this</code>, <code>...args</code>): <code>any</code></p><h5 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>this</code></td><td style="text-align:left;"><code>unknown</code></td></tr><tr><td style="text-align:left;"><code>...args</code></td><td style="text-align:left;"><code>unknown</code>[]</td></tr></tbody></table><h5 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>any</code></p><hr><h3 id="before" tabindex="-1">before <a class="header-anchor" href="#before" aria-label="Permalink to &quot;before&quot;">​</a></h3><p>▸ <strong>before</strong>(<code>n</code>, <code>func</code>): (<code>this</code>: <code>unknown</code>, ...<code>args</code>: <code>unknown</code>[]) =&gt; <code>unknown</code></p><p>返回一个函数，该函数将调用给定函数次数不超过<code>n</code>次，调用时可传递参数， 之后再调用这个函数，将返回一次最后调用给定函数的结果。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">before</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">before</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span></code></pre></div><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>n</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">调用次数</td></tr><tr><td style="text-align:left;"><code>func</code></td><td style="text-align:left;"><a href="./../interfaces/types.Func.html"><code>Func</code></a>&lt;<code>any</code>&gt;</td><td style="text-align:left;">给定函数</td></tr></tbody></table><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (<code>this</code>, <code>...args</code>): <code>unknown</code></p><h5 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>this</code></td><td style="text-align:left;"><code>unknown</code></td></tr><tr><td style="text-align:left;"><code>...args</code></td><td style="text-align:left;"><code>unknown</code>[]</td></tr></tbody></table><h5 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>unknown</code></p><hr><h3 id="compose" tabindex="-1">compose <a class="header-anchor" href="#compose" aria-label="Permalink to &quot;compose&quot;">​</a></h3><p>▸ <strong>compose</strong>(<code>...functions</code>): (<code>this</code>: <code>unknown</code>, ...<code>args</code>: <code>unknown</code>[]) =&gt; <code>unknown</code></p><p>返回一个由给定函数数组组合后的复合函数，也就是一个函数执行完之后把返回的结果再作为参数赋值给下一个函数来执行。以此类推，在数学里，把函数<code>f(), g(), 和 h()</code>组合起来可以得到复合函数<code>f(g(h()))</code>。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compose</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compose</span><span style="color:#24292E;">((</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span></span></code></pre></div><h4 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...functions</code></td><td style="text-align:left;"><a href="./../interfaces/types.Func.html"><code>Func</code></a>&lt;<code>any</code>&gt;[]</td><td style="text-align:left;">给定函数数组</td></tr></tbody></table><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (<code>this</code>, <code>...args</code>): <code>unknown</code></p><h5 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>this</code></td><td style="text-align:left;"><code>unknown</code></td></tr><tr><td style="text-align:left;"><code>...args</code></td><td style="text-align:left;"><code>unknown</code>[]</td></tr></tbody></table><h5 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>unknown</code></p><hr><h3 id="debounce" tabindex="-1">debounce <a class="header-anchor" href="#debounce" aria-label="Permalink to &quot;debounce&quot;">​</a></h3><p>▸ <strong>debounce</strong>(<code>func</code>, <code>wait</code>, <code>options?</code>): (<code>this</code>: <code>unknown</code>, ...<code>args</code>: <code>unknown</code>[]) =&gt; <code>unknown</code></p><p>返回一个防抖函数，该函数会从上一次被调用后，延迟<code>wait</code>毫秒后调用给定函数。 给定函数调用时会传入最后一次提供给<code>debounced</code>函数的参数。 后续调用的<code>debounced</code>函数返回是最后一次给定函数调用的结果。 如果<code>wait</code>为<code>0</code>并且<code>leading</code>为<code>false</code>,给定函数调用将被推迟到下一个点，类似<code>setTimeout</code>为<code>0</code>的超时。</p><p><strong><code>Method</code></strong></p><p><code>debounce.cancel()</code></p><p>取消防抖函数</p><p><code>debounce.flush()</code></p><p>立即调用防抖函数</p><p><code>debounce.pending()</code></p><p>判断是否有正在执行的防抖函数</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 避免窗口在变动时出现昂贵的计算开销</span></span>
<span class="line"><span style="color:#B392F0;">jQuery</span><span style="color:#E1E4E8;">(window).</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;resize&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">debounce</span><span style="color:#E1E4E8;">(calculateLayout, </span><span style="color:#79B8FF;">150</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当点击时 \`sendMail\` 随后就被调用</span></span>
<span class="line"><span style="color:#B392F0;">jQuery</span><span style="color:#E1E4E8;">(element).</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">debounce</span><span style="color:#E1E4E8;">(sendMail, </span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;leading&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;trailing&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">}))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 确保 \`batchLog\` 调用1次之后，1秒内会被触发</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">debounced</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">debounce</span><span style="color:#E1E4E8;">(batchLog, </span><span style="color:#79B8FF;">250</span><span style="color:#E1E4E8;">, { </span><span style="color:#9ECBFF;">&#39;maxWait&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EventSource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/stream&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">jQuery</span><span style="color:#E1E4E8;">(source).</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">, debounced)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 取消一个 trailing 的防抖动调用</span></span>
<span class="line"><span style="color:#B392F0;">jQuery</span><span style="color:#E1E4E8;">(window).</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;popstate&#39;</span><span style="color:#E1E4E8;">, debounced.cancel)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 避免窗口在变动时出现昂贵的计算开销</span></span>
<span class="line"><span style="color:#6F42C1;">jQuery</span><span style="color:#24292E;">(window).</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;resize&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">debounce</span><span style="color:#24292E;">(calculateLayout, </span><span style="color:#005CC5;">150</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当点击时 \`sendMail\` 随后就被调用</span></span>
<span class="line"><span style="color:#6F42C1;">jQuery</span><span style="color:#24292E;">(element).</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">debounce</span><span style="color:#24292E;">(sendMail, </span><span style="color:#005CC5;">300</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;leading&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;trailing&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 确保 \`batchLog\` 调用1次之后，1秒内会被触发</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">debounced</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">debounce</span><span style="color:#24292E;">(batchLog, </span><span style="color:#005CC5;">250</span><span style="color:#24292E;">, { </span><span style="color:#032F62;">&#39;maxWait&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">source</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EventSource</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/stream&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">jQuery</span><span style="color:#24292E;">(source).</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">, debounced)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 取消一个 trailing 的防抖动调用</span></span>
<span class="line"><span style="color:#6F42C1;">jQuery</span><span style="color:#24292E;">(window).</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;popstate&#39;</span><span style="color:#24292E;">, debounced.cancel)</span></span></code></pre></div><h4 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>func</code></td><td style="text-align:left;"><a href="./../interfaces/types.Func.html"><code>Func</code></a>&lt;<code>any</code>&gt;</td><td style="text-align:left;">需防抖动的函数</td></tr><tr><td style="text-align:left;"><code>wait</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">需要延迟的毫秒数</td></tr><tr><td style="text-align:left;"><code>options?</code></td><td style="text-align:left;"><code>DebounceOption</code></td><td style="text-align:left;">给定选项对象</td></tr></tbody></table><h4 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (<code>this</code>, <code>...args</code>): <code>unknown</code></p><p>防抖函数</p><h5 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>this</code></td><td style="text-align:left;"><code>unknown</code></td></tr><tr><td style="text-align:left;"><code>...args</code></td><td style="text-align:left;"><code>unknown</code>[]</td></tr></tbody></table><h5 id="returns-7" tabindex="-1">Returns <a class="header-anchor" href="#returns-7" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>unknown</code></p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>cancel</code></td><td style="text-align:left;">() =&gt; <code>void</code></td></tr><tr><td style="text-align:left;"><code>flush</code></td><td style="text-align:left;">() =&gt; <code>unknown</code></td></tr><tr><td style="text-align:left;"><code>pending</code></td><td style="text-align:left;">() =&gt; <code>boolean</code></td></tr></tbody></table><hr><h3 id="delay" tabindex="-1">delay <a class="header-anchor" href="#delay" aria-label="Permalink to &quot;delay&quot;">​</a></h3><p>▸ <strong>delay</strong>(<code>func</code>, <code>wait</code>, <code>...args</code>): <code>Promise</code>&lt;<code>unknown</code>&gt;</p><p>返回一个<code>promise</code>对象，类似<code>setTimeout</code>，等待<code>wait</code>毫秒后调用给定函数。如果传递可选的参数<code>args</code>，当给定函数执行时，<code>args</code>以数组的形式作为参数传入，可附加<code>await</code>暂停函数等待执行。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">delay</span><span style="color:#E1E4E8;">(console.log, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;logged later&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;logged later&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 一秒钟后执行</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">delay</span><span style="color:#24292E;">(console.log, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;logged later&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;logged later&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 一秒钟后执行</span></span></code></pre></div><h4 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>func</code></td><td style="text-align:left;"><a href="./../interfaces/types.Func.html"><code>Func</code></a>&lt;<code>any</code>&gt;</td><td style="text-align:left;">给定函数</td></tr><tr><td style="text-align:left;"><code>wait</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">等待毫秒数</td></tr><tr><td style="text-align:left;"><code>...args</code></td><td style="text-align:left;"><code>unknown</code>[]</td><td style="text-align:left;">附加参数</td></tr></tbody></table><h4 id="returns-8" tabindex="-1">Returns <a class="header-anchor" href="#returns-8" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>unknown</code>&gt;</p><hr><h3 id="negate" tabindex="-1">negate <a class="header-anchor" href="#negate" aria-label="Permalink to &quot;negate&quot;">​</a></h3><p>▸ <strong>negate</strong>&lt;<code>F</code>&gt;(<code>predicate</code>): (<code>this</code>: <code>unknown</code>, ...<code>args</code>: <code>unknown</code>[]) =&gt; <code>boolean</code></p><p>返回给定函数的否定版本函数。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> isFalsy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">negate</span><span style="color:#E1E4E8;">(Boolean)</span></span>
<span class="line"><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">([</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">], isFalsy)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> isFalsy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">negate</span><span style="color:#24292E;">(Boolean)</span></span>
<span class="line"><span style="color:#6F42C1;">find</span><span style="color:#24292E;">([</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], isFalsy)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span></code></pre></div><h4 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>F</code></td></tr></tbody></table><h4 id="parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-9" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>predicate</code></td><td style="text-align:left;"><code>F</code></td><td style="text-align:left;">给定函数</td></tr></tbody></table><h4 id="returns-9" tabindex="-1">Returns <a class="header-anchor" href="#returns-9" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (<code>this</code>, <code>...args</code>): <code>boolean</code></p><h5 id="parameters-10" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-10" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>this</code></td><td style="text-align:left;"><code>unknown</code></td></tr><tr><td style="text-align:left;"><code>...args</code></td><td style="text-align:left;"><code>unknown</code>[]</td></tr></tbody></table><h5 id="returns-10" tabindex="-1">Returns <a class="header-anchor" href="#returns-10" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>boolean</code></p><hr><h3 id="once" tabindex="-1">once <a class="header-anchor" href="#once" aria-label="Permalink to &quot;once&quot;">​</a></h3><p>▸ <strong>once</strong>(<code>func</code>): (<code>this</code>: <code>unknown</code>, ...<code>args</code>: <code>unknown</code>[]) =&gt; <code>unknown</code></p><p>返回一个函数，此函数只能调用给定函数一次，重复调用返回第一次调用的结果，调用给定函数时可传递参数。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">initialize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">once</span><span style="color:#E1E4E8;">(createApplication)</span></span>
<span class="line"><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// \`initialize\` 只能调用 \`createApplication\` 一次。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">initialize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">once</span><span style="color:#24292E;">(createApplication)</span></span>
<span class="line"><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// \`initialize\` 只能调用 \`createApplication\` 一次。</span></span></code></pre></div><h4 id="parameters-11" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-11" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>func</code></td><td style="text-align:left;"><a href="./../interfaces/types.Func.html"><code>Func</code></a>&lt;<code>any</code>&gt;</td><td style="text-align:left;">给定函数</td></tr></tbody></table><h4 id="returns-11" tabindex="-1">Returns <a class="header-anchor" href="#returns-11" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (<code>this</code>, <code>...args</code>): <code>unknown</code></p><h5 id="parameters-12" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-12" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>this</code></td><td style="text-align:left;"><code>unknown</code></td></tr><tr><td style="text-align:left;"><code>...args</code></td><td style="text-align:left;"><code>unknown</code>[]</td></tr></tbody></table><h5 id="returns-12" tabindex="-1">Returns <a class="header-anchor" href="#returns-12" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>unknown</code></p><hr><h3 id="throttle" tabindex="-1">throttle <a class="header-anchor" href="#throttle" aria-label="Permalink to &quot;throttle&quot;">​</a></h3><p>▸ <strong>throttle</strong>(<code>func</code>, <code>wait</code>, <code>options?</code>): (<code>this</code>: <code>unknown</code>, ...<code>args</code>: <code>unknown</code>[]) =&gt; <code>unknown</code></p><p>创建一个节流函数，在给定毫秒值内最多执行给定函数一次。 给定函数调用时会传入最后一次提供给<code>throttle</code>函数的参数。 后续调用的<code>throttle</code>函数返回的是最后一次给定函数调用的结果。 如果给定毫秒值为<code>0</code>并且<code>leading</code>为<code>false</code>，给定函数调用将被推迟到下一个点，类似<code>setTimeout</code>为<code>0</code>的超时。</p><p><strong><code>Method</code></strong></p><p><code>cancel()</code></p><p>取消节流函数</p><p><code>flush()</code></p><p>立即调用节流函数</p><p><code>pending()</code></p><p>判断是否有正在执行的节流函数</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 避免在滚动时过分的更新定位</span></span>
<span class="line"><span style="color:#B392F0;">jQuery</span><span style="color:#E1E4E8;">(window).</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;scroll&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">throttle</span><span style="color:#E1E4E8;">(updatePosition, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 点击后就调用 \`renewToken\`，但5分钟内超过1次。</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> throttled </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">throttle</span><span style="color:#E1E4E8;">(renewToken, </span><span style="color:#79B8FF;">300000</span><span style="color:#E1E4E8;">, { </span><span style="color:#9ECBFF;">&#39;trailing&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#B392F0;">jQuery</span><span style="color:#E1E4E8;">(element).</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">, throttled);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 取消一个 trailing 的节流调用。</span></span>
<span class="line"><span style="color:#B392F0;">jQuery</span><span style="color:#E1E4E8;">(window).</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;popstate&#39;</span><span style="color:#E1E4E8;">, throttled.cancel);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 避免在滚动时过分的更新定位</span></span>
<span class="line"><span style="color:#6F42C1;">jQuery</span><span style="color:#24292E;">(window).</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;scroll&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">throttle</span><span style="color:#24292E;">(updatePosition, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 点击后就调用 \`renewToken\`，但5分钟内超过1次。</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> throttled </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">throttle</span><span style="color:#24292E;">(renewToken, </span><span style="color:#005CC5;">300000</span><span style="color:#24292E;">, { </span><span style="color:#032F62;">&#39;trailing&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#6F42C1;">jQuery</span><span style="color:#24292E;">(element).</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, throttled);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 取消一个 trailing 的节流调用。</span></span>
<span class="line"><span style="color:#6F42C1;">jQuery</span><span style="color:#24292E;">(window).</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;popstate&#39;</span><span style="color:#24292E;">, throttled.cancel);</span></span></code></pre></div><h4 id="parameters-13" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-13" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>func</code></td><td style="text-align:left;"><a href="./../interfaces/types.Func.html"><code>Func</code></a>&lt;<code>any</code>&gt;</td><td style="text-align:left;">给定函数</td></tr><tr><td style="text-align:left;"><code>wait</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">给定毫秒值</td></tr><tr><td style="text-align:left;"><code>options?</code></td><td style="text-align:left;"><code>Omit</code>&lt;<code>DebounceOption</code>, <code>&quot;maxWait&quot;</code>&gt;</td><td style="text-align:left;">给定选项对象</td></tr></tbody></table><h4 id="returns-13" tabindex="-1">Returns <a class="header-anchor" href="#returns-13" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (<code>this</code>, <code>...args</code>): <code>unknown</code></p><p>防抖函数</p><h5 id="parameters-14" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-14" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>this</code></td><td style="text-align:left;"><code>unknown</code></td></tr><tr><td style="text-align:left;"><code>...args</code></td><td style="text-align:left;"><code>unknown</code>[]</td></tr></tbody></table><h5 id="returns-14" tabindex="-1">Returns <a class="header-anchor" href="#returns-14" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>unknown</code></p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>cancel</code></td><td style="text-align:left;">() =&gt; <code>void</code></td></tr><tr><td style="text-align:left;"><code>flush</code></td><td style="text-align:left;">() =&gt; <code>unknown</code></td></tr><tr><td style="text-align:left;"><code>pending</code></td><td style="text-align:left;">() =&gt; <code>boolean</code></td></tr></tbody></table>`,136),o=[l];function p(c,r,d,y,i,E){return e(),a("div",null,o)}const g=s(t,[["render",p]]);export{u as __pageData,g as default};
