import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.5be90078.js";const h=JSON.parse('{"title":"Module: core/useWebSocket","description":"","frontmatter":{"prev":{"text":"useAxios（Ajax）","link":"dist/modules/core_useAxios"},"next":{"text":"useObserver（发布/订阅）","link":"dist/modules/mode_useObserver"}},"headers":[],"relativePath":"dist/modules/core_useWebSocket.md","filePath":"dist/modules/core_useWebSocket.md","lastUpdated":null}'),l={name:"dist/modules/core_useWebSocket.md"},o=e(`<h1 id="module-core-usewebsocket" tabindex="-1">Module: core/useWebSocket <a class="header-anchor" href="#module-core-usewebsocket" aria-label="Permalink to &quot;Module: core/useWebSocket&quot;">​</a></h1><h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><ul><li><a href="./../classes/core_useWebSocket.WrapperWebSocket.html">WrapperWebSocket</a></li></ul><h2 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h2><ul><li><a href="./../interfaces/core_useWebSocket.CreateWebSocketOption.html">CreateWebSocketOption</a></li><li><a href="./../interfaces/core_useWebSocket.RequiredWebSocketOption.html">RequiredWebSocketOption</a></li><li><a href="./../interfaces/core_useWebSocket.WebSocketInterceptor.html">WebSocketInterceptor</a></li></ul><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="usewebsocket" tabindex="-1">useWebSocket <a class="header-anchor" href="#usewebsocket" aria-label="Permalink to &quot;useWebSocket&quot;">​</a></h3><p>▸ <strong>useWebSocket</strong>(<code>url</code>, <code>option?</code>): <code>Promise</code>&lt;<a href="./../classes/core_useWebSocket.WrapperWebSocket.html"><code>WrapperWebSocket</code></a>&gt;</p><p>返回一个基于<code>Promise</code>的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noreferrer">webSocket</a>包装器对象。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useWebSocket } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@sdkset/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> { CreateWebSocketOption } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@sdkset/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">option</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CreateWebSocketOption</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ws</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useWebSocket</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ws://124.222.224.186:8800&#39;</span><span style="color:#E1E4E8;">, option)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useWebSocket } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@sdkset/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> { CreateWebSocketOption } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@sdkset/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">option</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CreateWebSocketOption</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ws</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useWebSocket</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ws://124.222.224.186:8800&#39;</span><span style="color:#24292E;">, option)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">ws.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">ws.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">()</span></span></code></pre></div><p><strong><code>Default</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">useWebSocket</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  params: </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 请求参数</span></span>
<span class="line"><span style="color:#E1E4E8;">  protocols: </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 协议字符串 or 包含协议字符串的数组</span></span>
<span class="line"><span style="color:#E1E4E8;">  heartbeat: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 心跳配置</span></span>
<span class="line"><span style="color:#E1E4E8;">  autoReconnect: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 重连配置</span></span>
<span class="line"><span style="color:#E1E4E8;">  interceptor: {}, </span><span style="color:#6A737D;">// 拦截器对象</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 心跳（默认开启），布尔值控制开启/关闭，也可自行配置（以下为默认配置）：</span></span>
<span class="line"><span style="color:#B392F0;">heartbeat</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">message</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;ping&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 心跳间隔消息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">interval</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 心跳间隔毫秒数</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 重连（默认关闭），布尔值控制开启/关闭，也可自行配置（以下为默认配置）：</span></span>
<span class="line"><span style="color:#B392F0;">heartbeat</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">retries</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 最大重连次数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">delay</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 重连间隔毫秒数</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 拦截器对象</span></span>
<span class="line"><span style="color:#B392F0;">interceptor</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {} </span><span style="color:#6A737D;">// 连接发生错误时</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">message</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {} </span><span style="color:#6A737D;">// 接收到新消息时</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {} </span><span style="color:#6A737D;">// 连接关闭时</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">fail</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {} </span><span style="color:#6A737D;">// 重连失败时</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">useWebSocket</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  params: </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 请求参数</span></span>
<span class="line"><span style="color:#24292E;">  protocols: </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 协议字符串 or 包含协议字符串的数组</span></span>
<span class="line"><span style="color:#24292E;">  heartbeat: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 心跳配置</span></span>
<span class="line"><span style="color:#24292E;">  autoReconnect: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 重连配置</span></span>
<span class="line"><span style="color:#24292E;">  interceptor: {}, </span><span style="color:#6A737D;">// 拦截器对象</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 心跳（默认开启），布尔值控制开启/关闭，也可自行配置（以下为默认配置）：</span></span>
<span class="line"><span style="color:#6F42C1;">heartbeat</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">message</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;ping&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 心跳间隔消息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">interval</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 心跳间隔毫秒数</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 重连（默认关闭），布尔值控制开启/关闭，也可自行配置（以下为默认配置）：</span></span>
<span class="line"><span style="color:#6F42C1;">heartbeat</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">retries</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 最大重连次数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">delay</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 重连间隔毫秒数</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 拦截器对象</span></span>
<span class="line"><span style="color:#6F42C1;">interceptor</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {} </span><span style="color:#6A737D;">// 连接发生错误时</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">message</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {} </span><span style="color:#6A737D;">// 接收到新消息时</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {} </span><span style="color:#6A737D;">// 连接关闭时</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">fail</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {} </span><span style="color:#6A737D;">// 重连失败时</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>url</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">请求地址</td></tr><tr><td style="text-align:left;"><code>option?</code></td><td style="text-align:left;"><a href="./../interfaces/core_useWebSocket.CreateWebSocketOption.html"><code>CreateWebSocketOption</code></a></td><td style="text-align:left;">包装器选项</td></tr></tbody></table><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<a href="./../classes/core_useWebSocket.WrapperWebSocket.html"><code>WrapperWebSocket</code></a>&gt;</p>`,17),p=[o];function t(c,r,y,E,i,d){return a(),n("div",null,p)}const F=s(l,[["render",t]]);export{h as __pageData,F as default};
