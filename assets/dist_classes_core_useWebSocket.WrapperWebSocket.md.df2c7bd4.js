import{_ as e,o as t,c as a,Q as o}from"./chunks/framework.5be90078.js";const y=JSON.parse('{"title":"Class: WrapperWebSocket","description":"","frontmatter":{},"headers":[],"relativePath":"dist/classes/core_useWebSocket.WrapperWebSocket.md","filePath":"dist/classes/core_useWebSocket.WrapperWebSocket.md","lastUpdated":null}'),r={name:"dist/classes/core_useWebSocket.WrapperWebSocket.md"},s=o(`<h1 id="class-wrapperwebsocket" tabindex="-1">Class: WrapperWebSocket <a class="header-anchor" href="#class-wrapperwebsocket" aria-label="Permalink to &quot;Class: WrapperWebSocket&quot;">​</a></h1><p><a href="./../modules/core_useWebSocket.html">core/useWebSocket</a>.WrapperWebSocket</p><p>包装器类。</p><h2 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><h3 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h3><p>• <strong>new WrapperWebSocket</strong>(<code>url</code>, <code>config</code>, <code>observer</code>)</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>url</code></td><td style="text-align:left;"><code>string</code></td></tr><tr><td style="text-align:left;"><code>config</code></td><td style="text-align:left;"><a href="./../interfaces/core_useWebSocket.RequiredWebSocketOption.html"><code>RequiredWebSocketOption</code></a></td></tr><tr><td style="text-align:left;"><code>observer</code></td><td style="text-align:left;"><a href="./mode_useObserver.WrapperObserver.html"><code>WrapperObserver</code></a></td></tr></tbody></table><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="autoreconnect" tabindex="-1">#autoReconnect <a class="header-anchor" href="#autoreconnect" aria-label="Permalink to &quot;#autoReconnect&quot;">​</a></h3><p>• <code>Private</code> <code>Readonly</code> <strong>#autoReconnect</strong>: <code>Object</code></p><h4 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>delay</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">重连间隔毫秒数。</td></tr><tr><td style="text-align:left;"><code>enable</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">是否启用。</td></tr><tr><td style="text-align:left;"><code>retries</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">最大重连次数。</td></tr></tbody></table><hr><h3 id="heartbeat" tabindex="-1">#heartbeat <a class="header-anchor" href="#heartbeat" aria-label="Permalink to &quot;#heartbeat&quot;">​</a></h3><p>• <code>Private</code> <code>Readonly</code> <strong>#heartbeat</strong>: <code>Object</code></p><h4 id="type-declaration-1" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-1" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>enable</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">是否启用。</td></tr><tr><td style="text-align:left;"><code>interval</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">心跳间隔毫秒数。</td></tr><tr><td style="text-align:left;"><code>message</code></td><td style="text-align:left;"><code>string</code> | <code>ArrayBuffer</code> | <code>Blob</code></td><td style="text-align:left;">心跳间隔消息。</td></tr></tbody></table><hr><h3 id="heartbeattimer" tabindex="-1">#heartbeatTimer <a class="header-anchor" href="#heartbeattimer" aria-label="Permalink to &quot;#heartbeatTimer&quot;">​</a></h3><p>• <code>Private</code> <strong>#heartbeatTimer</strong>: <code>undefined</code> | <code>Timer</code></p><hr><h3 id="observer" tabindex="-1">#observer <a class="header-anchor" href="#observer" aria-label="Permalink to &quot;#observer&quot;">​</a></h3><p>• <code>Private</code> <code>Readonly</code> <strong>#observer</strong>: <a href="./mode_useObserver.WrapperObserver.html"><code>WrapperObserver</code></a></p><hr><h3 id="protocols" tabindex="-1">#protocols <a class="header-anchor" href="#protocols" aria-label="Permalink to &quot;#protocols&quot;">​</a></h3><p>• <code>Private</code> <code>Readonly</code> <strong>#protocols</strong>: <code>string</code> | <code>string</code>[]</p><hr><h3 id="queryurl" tabindex="-1">#queryUrl <a class="header-anchor" href="#queryurl" aria-label="Permalink to &quot;#queryUrl&quot;">​</a></h3><p>• <code>Private</code> <code>Readonly</code> <strong>#queryUrl</strong>: <code>string</code></p><hr><h3 id="reconnectcount" tabindex="-1">#reconnectCount <a class="header-anchor" href="#reconnectcount" aria-label="Permalink to &quot;#reconnectCount&quot;">​</a></h3><p>• <code>Private</code> <strong>#reconnectCount</strong>: <code>number</code> = <code>0</code></p><hr><h3 id="ws" tabindex="-1">#ws <a class="header-anchor" href="#ws" aria-label="Permalink to &quot;#ws&quot;">​</a></h3><p>• <code>Private</code> <strong>#ws</strong>: <code>WebSocket</code></p><h2 id="accessors" tabindex="-1">Accessors <a class="header-anchor" href="#accessors" aria-label="Permalink to &quot;Accessors&quot;">​</a></h2><h3 id="self" tabindex="-1">self <a class="header-anchor" href="#self" aria-label="Permalink to &quot;self&quot;">​</a></h3><p>• <code>get</code> <strong>self</strong>(): <code>WebSocket</code></p><p><code>WebSocket</code>实例。</p><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>WebSocket</code></p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="heartbeatclose" tabindex="-1">#heartbeatClose <a class="header-anchor" href="#heartbeatclose" aria-label="Permalink to &quot;#heartbeatClose&quot;">​</a></h3><p>▸ <code>Private</code> <strong>#heartbeatClose</strong>(): <code>void</code></p><p>关闭<code>Socket</code>心跳定时器。</p><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="heartbeatopen" tabindex="-1">#heartbeatOpen <a class="header-anchor" href="#heartbeatopen" aria-label="Permalink to &quot;#heartbeatOpen&quot;">​</a></h3><p>▸ <code>Private</code> <strong>#heartbeatOpen</strong>(): <code>void</code></p><p>开启<code>Socket</code>心跳定时器。</p><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="initobserverinterceptors" tabindex="-1">#initObserverInterceptors <a class="header-anchor" href="#initobserverinterceptors" aria-label="Permalink to &quot;#initObserverInterceptors&quot;">​</a></h3><p>▸ <code>Private</code> <strong>#initObserverInterceptors</strong>(<code>interceptors?</code>): <code>void</code></p><p>初始化<code>interceptors</code>，订阅特定事件，处理边界情况。</p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>interceptors</code></td><td style="text-align:left;"><a href="./../interfaces/core_useWebSocket.WebSocketInterceptor.html"><code>WebSocketInterceptor</code></a></td></tr></tbody></table><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="websocketinterceptorshandle" tabindex="-1">#webSocketInterceptorsHandle <a class="header-anchor" href="#websocketinterceptorshandle" aria-label="Permalink to &quot;#webSocketInterceptorsHandle&quot;">​</a></h3><p>▸ <code>Private</code> <strong>#webSocketInterceptorsHandle</strong>(): <code>void</code></p><p>挂载<code>interceptors</code>，发布特定事件，处理边界情况。</p><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="close" tabindex="-1">close <a class="header-anchor" href="#close" aria-label="Permalink to &quot;close&quot;">​</a></h3><p>▸ <strong>close</strong>(<code>code?</code>, <code>reason?</code>): <code>void</code></p><p>关闭<code>WebSocket</code>连接或连接尝试（如果有的话）。如果连接已经关闭，则此方法不执行任何操作。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> close Socket</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ws.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> close Socket</span></span></code></pre></div><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>code?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">一个数字状态码，它解释了连接关闭的原因。如果没有传这个参数，默认使用 1005。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CloseEvent" target="_blank" rel="noreferrer">CloseEvent</a>允许的状态码见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CloseEvent#status_codes" target="_blank" rel="noreferrer">状态码列表</a> 。</td></tr><tr><td style="text-align:left;"><code>reason?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">一个人类可读的字符串，它解释了连接关闭的原因。这个 UTF-8 编码的字符串不能超过 123 个字节。</td></tr></tbody></table><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="send" tabindex="-1">send <a class="header-anchor" href="#send" aria-label="Permalink to &quot;send&quot;">​</a></h3><p>▸ <strong>send</strong>(<code>data</code>): <code>void</code></p><p>将需要通过<code>WebSocket</code>链接传输至服务器的数据排入队列，并根据所需要传输的<code>data bytes</code>的大小来增加<code>bufferedAmount</code>的值。 若数据无法传输（例如数据需要缓存而缓冲区已满）时，套接字会自行关闭。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">observer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Observer</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">observer.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;open&#39;</span><span style="color:#E1E4E8;">, func)</span></span>
<span class="line"><span style="color:#E1E4E8;">observer.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;open&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">observer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Observer</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">observer.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;open&#39;</span><span style="color:#24292E;">, func)</span></span>
<span class="line"><span style="color:#24292E;">observer.</span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;open&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">()</span></span></code></pre></div><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>data</code></td><td style="text-align:left;"><code>unknown</code></td><td style="text-align:left;">用于传输至服务器的数据。它必须是以下类型之一： <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noreferrer">USVString</a> 文本字符串。字符串将以 UTF-8 格式添加到缓冲区，并且 bufferedAmount 将加上该字符串以 UTF-8 格式编码时的字节数的值。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">ArrayBuffer</a> 可以使用一有类型的数组对象发送底层二进制数据；其二进制数据内存将被缓存于缓冲区，bufferedAmount 将加上所需字节数的值。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noreferrer">Blob</a> Blob 类型将队列 blob 中的原始数据以二进制中传输。 bufferedAmount 将加上原始数据的字节数的值。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">ArrayBufferView</a> 可以以二进制帧的形式发送任何 JavaScript 类数组对象 ；其二进制数据内容将被队列于缓冲区中。值 bufferedAmount 将加上必要字节数的值。</td></tr></tbody></table><h4 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p>`,88),l=[s];function n(c,d,p,i,h,b){return t(),a("div",null,l)}const f=e(r,[["render",n]]);export{y as __pageData,f as default};
