import{_ as e,o as t,c as a,Q as r}from"./chunks/framework.5be90078.js";const f=JSON.parse('{"title":"Module: types","description":"","frontmatter":{},"headers":[],"relativePath":"dist/modules/types.md","filePath":"dist/modules/types.md","lastUpdated":null}'),o={name:"dist/modules/types.md"},d=r('<h1 id="module-types" tabindex="-1">Module: types <a class="header-anchor" href="#module-types" aria-label="Permalink to &quot;Module: types&quot;">​</a></h1><h2 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h2><ul><li><a href="./../interfaces/types.Dictionary.html">Dictionary</a></li><li><a href="./../interfaces/types.Func.html">Func</a></li><li><a href="./../interfaces/types.List.html">List</a></li></ul><h2 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-label="Permalink to &quot;Type Aliases&quot;">​</a></h2><h3 id="collection" tabindex="-1">Collection <a class="header-anchor" href="#collection" aria-label="Permalink to &quot;Collection&quot;">​</a></h3><p>Ƭ <strong>Collection</strong>&lt;<code>T</code>&gt;: <a href="./../interfaces/types.List.html"><code>List</code></a>&lt;<code>T</code>&gt; | <a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>T</code>&gt;</p><p>集合。</p><h4 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;"><code>any</code></td></tr></tbody></table><hr><h3 id="new" tabindex="-1">New <a class="header-anchor" href="#new" aria-label="Permalink to &quot;New&quot;">​</a></h3><p>Ƭ <strong>New</strong>&lt;<code>T</code>&gt;: (...<code>args</code>: <code>any</code>[]) =&gt; <code>T</code></p><h4 id="type-parameters-1" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-1" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;"><code>unknown</code></td></tr></tbody></table><h4 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>• (<code>...args</code>)</p><p>构造函数匹配 new。</p><h5 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...args</code></td><td style="text-align:left;"><code>any</code>[]</td></tr></tbody></table><hr><h3 id="typedarray" tabindex="-1">TypedArray <a class="header-anchor" href="#typedarray" aria-label="Permalink to &quot;TypedArray&quot;">​</a></h3><p>Ƭ <strong>TypedArray</strong>: <code>Int8Array</code> | <code>Uint8Array</code> | <code>Int16Array</code> | <code>Uint16Array</code> | <code>Int32Array</code> | <code>Uint32Array</code> | <code>Uint8ClampedArray</code> | <code>Float32Array</code> | <code>Float64Array</code></p><p>类型化数组。</p>',23),l=[d];function s(c,i,n,h,y,p){return t(),a("div",null,l)}const u=e(o,[["render",s]]);export{f as __pageData,u as default};
