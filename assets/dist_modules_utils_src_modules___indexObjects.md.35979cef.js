import{_ as s,o as e,c as a,Q as t}from"./chunks/framework.5be90078.js";const g=JSON.parse('{"title":"Module: utils/src/modules/__indexObjects","description":"","frontmatter":{"prev":{"text":"集合（collections）","link":"dist/modules/utils_src_modules___indexCollections"},"next":{"text":"数组（arrays）","link":"dist/modules/utils_src_modules___indexArrays"}},"headers":[],"relativePath":"dist/modules/utils_src_modules___indexObjects.md","filePath":"dist/modules/utils_src_modules___indexObjects.md","lastUpdated":null}'),l={name:"dist/modules/utils_src_modules___indexObjects.md"},o=t(`<h1 id="module-utils-src-modules-indexobjects" tabindex="-1">Module: utils/src/modules/__indexObjects <a class="header-anchor" href="#module-utils-src-modules-indexobjects" aria-label="Permalink to &quot;Module: utils/src/modules/\\_\\_indexObjects&quot;">​</a></h1><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="allkeys" tabindex="-1">allKeys <a class="header-anchor" href="#allkeys" aria-label="Permalink to &quot;allKeys&quot;">​</a></h3><p>▸ <strong>allKeys</strong>(<code>object</code>): <code>string</code>[]</p><p>返回一个数组，数组由给定对象自身的、继承的、可枚举的字符串键属性名组成。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Stooge</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">Stooge</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.silly </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">allKeys</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Stooge</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Moe&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;silly&#39;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Stooge</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">Stooge</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.silly </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">allKeys</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Stooge</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Moe&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;silly&#39;</span><span style="color:#24292E;">]</span></span></code></pre></div><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</td><td style="text-align:left;">给定对象</td></tr></tbody></table><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>string</code>[]</p><hr><h3 id="clone" tabindex="-1">clone <a class="header-anchor" href="#clone" aria-label="Permalink to &quot;clone&quot;">​</a></h3><p>▸ <strong>clone</strong>&lt;<code>V</code>&gt;(<code>value</code>): <code>V</code></p><p>返回给定值的浅拷贝。任何嵌套的对象或数组都通过引用拷贝。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">storage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { name: { deep: { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> } } }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">storage.deep </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cloneDeep</span><span style="color:#E1E4E8;">(storage).deep</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">storage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { name: { deep: { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> } } }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">storage.deep </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cloneDeep</span><span style="color:#24292E;">(storage).deep</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span></code></pre></div><h4 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>V</code></td></tr></tbody></table><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>value</code></td><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">给定值</td></tr></tbody></table><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>V</code></p><hr><h3 id="clonedeep" tabindex="-1">cloneDeep <a class="header-anchor" href="#clonedeep" aria-label="Permalink to &quot;cloneDeep&quot;">​</a></h3><p>▸ <strong>cloneDeep</strong>&lt;<code>V</code>&gt;(<code>value</code>): <code>V</code></p><p>推荐原生：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/structuredClone" target="_blank" rel="noreferrer">structuredClone</a>。 返回给定值的深拷贝。任何嵌套的对象或数组都通过值拷贝，对于不可拷贝的对象，例如<code>function</code>则返回<code>{}</code>。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">storage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { name: { deep: { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> } } }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">storage.deep </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cloneDeep</span><span style="color:#E1E4E8;">(storage).deep</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">storage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { name: { deep: { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> } } }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">storage.deep </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cloneDeep</span><span style="color:#24292E;">(storage).deep</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span></code></pre></div><h4 id="type-parameters-1" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-1" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>V</code></td></tr></tbody></table><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>value</code></td><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">给定值</td></tr></tbody></table><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>V</code></p><hr><h3 id="create" tabindex="-1">create <a class="header-anchor" href="#create" aria-label="Permalink to &quot;create&quot;">​</a></h3><p>▸ <strong>create</strong>(<code>prototype</code>, <code>props?</code>): <code>any</code></p><p>推荐原生：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noreferrer">Object.create</a>。 返回一个对象，对象以给定对象作为原型，可附加<code>props</code>作为对象的属性。基本上，和<code>Object.create</code>一样，但是没有所有的属性描述符。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Stooge</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">, { name: </span><span style="color:#9ECBFF;">&#39;Moe&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Moe&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">__proto__</span><span style="color:#E1E4E8;">: Stooge.protoType }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Stooge</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">, { name: </span><span style="color:#032F62;">&#39;Moe&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Moe&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">__proto__</span><span style="color:#24292E;">: Stooge.protoType }</span></span></code></pre></div><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>prototype</code></td><td style="text-align:left;"><code>unknown</code></td><td style="text-align:left;">给定对象</td></tr><tr><td style="text-align:left;"><code>props?</code></td><td style="text-align:left;"><code>object</code></td><td style="text-align:left;">附加属性对象</td></tr></tbody></table><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>any</code></p><hr><h3 id="defaults" tabindex="-1">defaults <a class="header-anchor" href="#defaults" aria-label="Permalink to &quot;defaults&quot;">​</a></h3><p>▸ <strong>defaults</strong>(<code>object</code>, <code>...handles</code>): <a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</p><p>返回给定对象，使用<code>handles</code>对象填充给定对象中相应键值为<code>undefined</code>的属性。一旦<code>undefined</code>属性被填充，再使用<code>defaults</code>方法将不会有任何效果。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iceCream</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { flavor: </span><span style="color:#9ECBFF;">&#39;chocolate&#39;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#B392F0;">defaults</span><span style="color:#E1E4E8;">(iceCream, { flavor: </span><span style="color:#9ECBFF;">&#39;vanilla&#39;</span><span style="color:#E1E4E8;">, sprinkles: </span><span style="color:#9ECBFF;">&#39;lots&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">flavor</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;chocolate&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">sprinkles</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;lots&#39;</span><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iceCream</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { flavor: </span><span style="color:#032F62;">&#39;chocolate&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#6F42C1;">defaults</span><span style="color:#24292E;">(iceCream, { flavor: </span><span style="color:#032F62;">&#39;vanilla&#39;</span><span style="color:#24292E;">, sprinkles: </span><span style="color:#032F62;">&#39;lots&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">flavor</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;chocolate&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">sprinkles</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;lots&#39;</span><span style="color:#24292E;"> }</span></span></code></pre></div><h4 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</td><td style="text-align:left;">给定对象</td></tr><tr><td style="text-align:left;"><code>...handles</code></td><td style="text-align:left;"><a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;[]</td><td style="text-align:left;">填充对象</td></tr></tbody></table><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</p><hr><h3 id="entries" tabindex="-1">entries <a class="header-anchor" href="#entries" aria-label="Permalink to &quot;entries&quot;">​</a></h3><p>▸ <strong>entries</strong>&lt;<code>V</code>&gt;(<code>object</code>): [<code>string</code>, <code>TypeOfDictionary</code>&lt;<code>V</code>&gt;][]</p><p>推荐原生：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" target="_blank" rel="noreferrer">Object.entries</a>。 返回一个数组，数组由给定对象自身可枚举属性的键-值对组成，其排列与使用<code>for...in</code>循环遍历该对象时返回的顺序一致（区别在于<code>for-in</code>循环还会枚举原型链中的属性）。<code>object</code>的反函数。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">entries</span><span style="color:#E1E4E8;">({ one: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, two: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, three: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [[</span><span style="color:#9ECBFF;">&#39;one&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], [</span><span style="color:#9ECBFF;">&#39;two&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">], [</span><span style="color:#9ECBFF;">&#39;three&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">entries</span><span style="color:#24292E;">({ one: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, two: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, three: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [[</span><span style="color:#032F62;">&#39;one&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], [</span><span style="color:#032F62;">&#39;two&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], [</span><span style="color:#032F62;">&#39;three&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]]</span></span></code></pre></div><h4 id="type-parameters-2" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-2" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">extends <a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>, <code>V</code>&gt;</td></tr></tbody></table><h4 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">给定对象</td></tr></tbody></table><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p>[<code>string</code>, <code>TypeOfDictionary</code>&lt;<code>V</code>&gt;][]</p><hr><h3 id="extend" tabindex="-1">extend <a class="header-anchor" href="#extend" aria-label="Permalink to &quot;extend&quot;">​</a></h3><p>▸ <strong>extend</strong>(<code>object</code>, <code>...handles</code>): <a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</p><p>返回给定对象，使用<code>handles</code>对象中的所有可枚举的、可继承的属性覆盖到给定对象上。复制是按顺序的，所以后面的对象属性会把前面的对象属性覆盖掉（如果有重复）。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">({ name: </span><span style="color:#9ECBFF;">&#39;moe&#39;</span><span style="color:#E1E4E8;"> }, { age: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;moe&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">age</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&#39;moe&#39;</span><span style="color:#24292E;"> }, { age: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;moe&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">age</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;"> }</span></span></code></pre></div><h4 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</td><td style="text-align:left;">给定对象</td></tr><tr><td style="text-align:left;"><code>...handles</code></td><td style="text-align:left;"><a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;[]</td><td style="text-align:left;">覆盖对象</td></tr></tbody></table><h4 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</p><hr><h3 id="extendown" tabindex="-1">extendOwn <a class="header-anchor" href="#extendown" aria-label="Permalink to &quot;extendOwn&quot;">​</a></h3><p>▸ <strong>extendOwn</strong>(<code>object</code>, <code>...handles</code>): <code>any</code></p><p>推荐原生：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noreferrer">Object.assign</a>。 返回给定对象，使用<code>handles</code>对象中所有可枚举的自有属性覆盖到给定对象上。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">extendOwn</span><span style="color:#E1E4E8;">({}, { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">extendOwn</span><span style="color:#24292E;">({}, { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> }</span></span></code></pre></div><h4 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</td><td style="text-align:left;">给定对象</td></tr><tr><td style="text-align:left;"><code>...handles</code></td><td style="text-align:left;"><a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;[]</td><td style="text-align:left;">覆盖对象</td></tr></tbody></table><h4 id="returns-7" tabindex="-1">Returns <a class="header-anchor" href="#returns-7" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>any</code></p><hr><h3 id="findkey" tabindex="-1">findKey <a class="header-anchor" href="#findkey" aria-label="Permalink to &quot;findKey&quot;">​</a></h3><p>▸ <strong>findKey</strong>&lt;<code>V</code>, <code>I</code>&gt;(<code>object</code>, <code>predicate?</code>, <code>context?</code>): <code>undefined</code> | <code>string</code></p><p>返回给定对象中第一个通过<code>predicate</code>真值检测的键，如果没有元素通过检测则返回<code>undefined</code>。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">findKey</span><span style="color:#E1E4E8;">({a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">}, (</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> a</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">findKey</span><span style="color:#24292E;">({a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">}, (</span><span style="color:#E36209;">value</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> a</span></span></code></pre></div><h4 id="type-parameters-3" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-3" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">extends <a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>, <code>V</code>&gt;</td></tr><tr><td style="text-align:left;"><code>I</code></td><td style="text-align:left;">extends <code>Iteratee</code>&lt;<code>V</code>, <code>boolean</code>&gt;</td></tr></tbody></table><h4 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">给定对象</td></tr><tr><td style="text-align:left;"><code>predicate?</code></td><td style="text-align:left;"><code>I</code></td><td style="text-align:left;">谓语迭代器函数，通过 iteratee 进行转换，以简化速记语法</td></tr><tr><td style="text-align:left;"><code>context?</code></td><td style="text-align:left;"><code>unknown</code></td><td style="text-align:left;">上下文对象，若传递，则作为谓语迭代器函数的执行上下文 this</td></tr></tbody></table><h4 id="returns-8" tabindex="-1">Returns <a class="header-anchor" href="#returns-8" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>undefined</code> | <code>string</code></p><hr><h3 id="functions-1" tabindex="-1">functions <a class="header-anchor" href="#functions-1" aria-label="Permalink to &quot;functions&quot;">​</a></h3><p>▸ <strong>functions</strong>(<code>object</code>): <code>string</code>[]</p><p>返回一个数组，数组由给定对象中类型为<code>function</code>的键组成。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">functions</span><span style="color:#E1E4E8;">(_)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;all&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;unknown&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;bind&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;bindAll&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;clone&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;compact&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;compose&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">functions</span><span style="color:#24292E;">(_)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;all&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;unknown&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;bind&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;bindAll&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;clone&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;compact&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;compose&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">]</span></span></code></pre></div><h4 id="parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-9" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</td><td style="text-align:left;">给定对象</td></tr></tbody></table><h4 id="returns-9" tabindex="-1">Returns <a class="header-anchor" href="#returns-9" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>string</code>[]</p><hr><h3 id="get" tabindex="-1">get <a class="header-anchor" href="#get" aria-label="Permalink to &quot;get&quot;">​</a></h3><p>▸ <strong>get</strong>&lt;<code>V</code>, <code>U</code>&gt;(<code>object</code>, <code>path</code>, <code>defaultValue?</code>): <code>U</code> | <code>TypeOfDictionary</code>&lt;<code>V</code>&gt;</p><p>返回给定对象指定<code>path</code>（使用<code>toPath</code>转换）键的值，如果指定键不存在则返回<code>defaultValue</code>。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stooge</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { name: </span><span style="color:#9ECBFF;">&#39;moe&#39;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(stooge, </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;moe&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">stooge</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&#39;moe&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(stooge, </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;moe&#39;</span></span></code></pre></div><h4 id="type-parameters-4" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-4" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">extends <a href="./types.html#collection"><code>Collection</code></a></td></tr><tr><td style="text-align:left;"><code>U</code></td><td style="text-align:left;"><code>U</code></td></tr></tbody></table><h4 id="parameters-10" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-10" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">给定对象</td></tr><tr><td style="text-align:left;"><code>path</code></td><td style="text-align:left;"><code>unknown</code></td><td style="text-align:left;">检索路径</td></tr><tr><td style="text-align:left;"><code>defaultValue?</code></td><td style="text-align:left;"><code>U</code></td><td style="text-align:left;">默认值</td></tr></tbody></table><h4 id="returns-10" tabindex="-1">Returns <a class="header-anchor" href="#returns-10" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>U</code> | <code>TypeOfDictionary</code>&lt;<code>V</code>&gt;</p><hr><h3 id="has" tabindex="-1">has <a class="header-anchor" href="#has" aria-label="Permalink to &quot;has&quot;">​</a></h3><p>▸ <strong>has</strong>(<code>object</code>, <code>path</code>): <code>boolean</code></p><p>返回一个布尔值，判断给定对象自身属性中是否具有指定的路径属性（暨是否有指定的键）。 等同于<code>object.hasOwnProperty(key)</code>，这是使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty" target="_blank" rel="noreferrer">Object.prototype.hasOwnProperty</a>函数的一个安全引用（此函数可能被意外覆盖）。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">({ a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, c: { d: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> } }, [</span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;d&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">({ a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, c: { d: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> } }, </span><span style="color:#9ECBFF;">&#39;c.d&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">has</span><span style="color:#24292E;">({ a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, c: { d: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> } }, [</span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;d&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">has</span><span style="color:#24292E;">({ a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, c: { d: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> } }, </span><span style="color:#032F62;">&#39;c.d&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span></code></pre></div><h4 id="parameters-11" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-11" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</td><td style="text-align:left;">给定对象</td></tr><tr><td style="text-align:left;"><code>path</code></td><td style="text-align:left;"><code>unknown</code></td><td style="text-align:left;">检索路径</td></tr></tbody></table><h4 id="returns-11" tabindex="-1">Returns <a class="header-anchor" href="#returns-11" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>boolean</code></p><hr><h3 id="invert" tabindex="-1">invert <a class="header-anchor" href="#invert" aria-label="Permalink to &quot;invert&quot;">​</a></h3><p>▸ <strong>invert</strong>(<code>object</code>): <a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</p><p>返回一个对象，对象由给定对象键（keys）和值（values）互换后组成。对于这个操作，必须确保给定对象里所有的值都是唯一的且可以序列化成字符串。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">invert</span><span style="color:#E1E4E8;">({ Moe: </span><span style="color:#9ECBFF;">&#39;Moses&#39;</span><span style="color:#E1E4E8;">, Larry: </span><span style="color:#9ECBFF;">&#39;Louis&#39;</span><span style="color:#E1E4E8;">, Curly: </span><span style="color:#9ECBFF;">&#39;Jerome&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">Moses</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Moe&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Louis</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Larry&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Jerome</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Curly&#39;</span><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">invert</span><span style="color:#24292E;">({ Moe: </span><span style="color:#032F62;">&#39;Moses&#39;</span><span style="color:#24292E;">, Larry: </span><span style="color:#032F62;">&#39;Louis&#39;</span><span style="color:#24292E;">, Curly: </span><span style="color:#032F62;">&#39;Jerome&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">Moses</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Moe&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Louis</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Larry&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Jerome</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Curly&#39;</span><span style="color:#24292E;"> }</span></span></code></pre></div><h4 id="parameters-12" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-12" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</td><td style="text-align:left;">给定对象</td></tr></tbody></table><h4 id="returns-12" tabindex="-1">Returns <a class="header-anchor" href="#returns-12" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</p><hr><h3 id="keys" tabindex="-1">keys <a class="header-anchor" href="#keys" aria-label="Permalink to &quot;keys&quot;">​</a></h3><p>▸ <strong>keys</strong>(<code>object</code>): <code>string</code>[]</p><p>推荐原生：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="noreferrer">Object.keys</a>。 返回一个数组，数组由给定对象自身可枚举的字符串键属性名组成。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">({ one: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, two: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, three: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;one&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;two&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;three&#39;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">({ one: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, two: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, three: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;one&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;two&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;three&#39;</span><span style="color:#24292E;">]</span></span></code></pre></div><h4 id="parameters-13" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-13" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</td><td style="text-align:left;">给定对象</td></tr></tbody></table><h4 id="returns-13" tabindex="-1">Returns <a class="header-anchor" href="#returns-13" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>string</code>[]</p><hr><h3 id="mapobject" tabindex="-1">mapObject <a class="header-anchor" href="#mapobject" aria-label="Permalink to &quot;mapObject&quot;">​</a></h3><p>▸ <strong>mapObject</strong>&lt;<code>V</code>, <code>I</code>&gt;(<code>object</code>, <code>iteratee</code>, <code>context?</code>): { [K in string | number | symbol]: IterateeResult&lt;I, V[K]&gt; }</p><p>返回一个对象，对象由给定对象每个属性值通过<code>Iteratee</code>转换后组成。类似于<code>map</code>，但此方法用于对象。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">mapObject</span><span style="color:#E1E4E8;">({start: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, end: </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">}, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">17</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">mapObject</span><span style="color:#24292E;">({start: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, end: </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">}, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">17</span><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="type-parameters-5" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-5" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">extends <a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>, <code>V</code>&gt;</td></tr><tr><td style="text-align:left;"><code>I</code></td><td style="text-align:left;">extends <code>Iteratee</code>&lt;<code>V</code>, <code>unknown</code>&gt;</td></tr></tbody></table><h4 id="parameters-14" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-14" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">给定对象</td></tr><tr><td style="text-align:left;"><code>iteratee</code></td><td style="text-align:left;"><code>I</code></td><td style="text-align:left;">迭代器函数，通过 iteratee 进行转换，以简化速记语法</td></tr><tr><td style="text-align:left;"><code>context?</code></td><td style="text-align:left;"><code>unknown</code></td><td style="text-align:left;">上下文对象，若传递，则作为迭代器函数的执行上下文 this</td></tr></tbody></table><h4 id="returns-14" tabindex="-1">Returns <a class="header-anchor" href="#returns-14" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p>{ [K in string | number | symbol]: IterateeResult&lt;I, V[K]&gt; }</p><hr><h3 id="matcher" tabindex="-1">matcher <a class="header-anchor" href="#matcher" aria-label="Permalink to &quot;matcher&quot;">​</a></h3><p>▸ <strong>matcher</strong>&lt;<code>V</code>&gt;(<code>properties</code>): (<code>object</code>: <code>unknown</code>) =&gt; <code>boolean</code></p><p>返回一个函数，函数判断给定对象是否匹配<code>properties</code>键-值对。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ready</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">matcher</span><span style="color:#E1E4E8;">({ selected: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, visible: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(list, ready)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [ </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ready</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">matcher</span><span style="color:#24292E;">({ selected: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, visible: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(list, ready)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [ </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> ]</span></span></code></pre></div><h4 id="type-parameters-6" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-6" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">extends <a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>, <code>V</code>&gt;</td></tr></tbody></table><h4 id="parameters-15" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-15" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>properties</code></td><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">谓语对象</td></tr></tbody></table><h4 id="returns-15" tabindex="-1">Returns <a class="header-anchor" href="#returns-15" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (<code>object</code>): <code>boolean</code></p><h5 id="parameters-16" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-16" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><code>unknown</code></td></tr></tbody></table><h5 id="returns-16" tabindex="-1">Returns <a class="header-anchor" href="#returns-16" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>boolean</code></p><hr><h3 id="omit" tabindex="-1">omit <a class="header-anchor" href="#omit" aria-label="Permalink to &quot;omit&quot;">​</a></h3><p>▸ <strong>omit</strong>&lt;<code>V</code>, <code>K</code>&gt;(<code>object</code>, <code>predicate</code>, <code>context?</code>): <code>Omit</code>&lt;<code>V</code>, <code>K</code>&gt; | <code>Partial</code>&lt;<code>V</code>&gt;</p><p>返回一个对象，对象由给定对象中没有通过<code>predicate</code>真值检测的元素组成。<code>pick</code>的反函数。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">omit</span><span style="color:#E1E4E8;">({ name: </span><span style="color:#9ECBFF;">&#39;moe&#39;</span><span style="color:#E1E4E8;">, age: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, userid: </span><span style="color:#9ECBFF;">&#39;moe1&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;userid&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;moe&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">age</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">omit</span><span style="color:#E1E4E8;">({ name: </span><span style="color:#9ECBFF;">&#39;moe&#39;</span><span style="color:#E1E4E8;">, age: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, userid: </span><span style="color:#9ECBFF;">&#39;moe1&#39;</span><span style="color:#E1E4E8;"> }, [</span><span style="color:#9ECBFF;">&#39;age&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;userid&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;moe&#39;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">omit</span><span style="color:#E1E4E8;">({name: </span><span style="color:#9ECBFF;">&#39;moe&#39;</span><span style="color:#E1E4E8;">, age: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, userid: </span><span style="color:#9ECBFF;">&#39;moe1&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">object</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isNumber</span><span style="color:#E1E4E8;">(value)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;moe&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">userid</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;moe1&#39;</span><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">omit</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&#39;moe&#39;</span><span style="color:#24292E;">, age: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, userid: </span><span style="color:#032F62;">&#39;moe1&#39;</span><span style="color:#24292E;"> }, </span><span style="color:#032F62;">&#39;userid&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;moe&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">age</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">omit</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&#39;moe&#39;</span><span style="color:#24292E;">, age: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, userid: </span><span style="color:#032F62;">&#39;moe1&#39;</span><span style="color:#24292E;"> }, [</span><span style="color:#032F62;">&#39;age&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;userid&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;moe&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">omit</span><span style="color:#24292E;">({name: </span><span style="color:#032F62;">&#39;moe&#39;</span><span style="color:#24292E;">, age: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, userid: </span><span style="color:#032F62;">&#39;moe1&#39;</span><span style="color:#24292E;"> }, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#E36209;">object</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isNumber</span><span style="color:#24292E;">(value)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;moe&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">userid</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;moe1&#39;</span><span style="color:#24292E;"> }</span></span></code></pre></div><h4 id="type-parameters-7" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-7" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">extends <a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>, <code>V</code>&gt;</td></tr><tr><td style="text-align:left;"><code>K</code></td><td style="text-align:left;">extends <code>string</code></td></tr></tbody></table><h4 id="parameters-17" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-17" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">给定对象</td></tr><tr><td style="text-align:left;"><code>predicate</code></td><td style="text-align:left;"><code>K</code> | <code>ObjectIterator</code>&lt;<code>TypeOfDictionary</code>&lt;<code>V</code>&gt;, <code>boolean</code>&gt; | <code>K</code>[]</td><td style="text-align:left;">谓语迭代器函数，通过 iteratee 进行转换，以简化速记语法</td></tr><tr><td style="text-align:left;"><code>context?</code></td><td style="text-align:left;"><code>unknown</code></td><td style="text-align:left;">上下文对象，若传递，则作为谓语迭代器函数的执行上下文 this</td></tr></tbody></table><h4 id="returns-17" tabindex="-1">Returns <a class="header-anchor" href="#returns-17" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Omit</code>&lt;<code>V</code>, <code>K</code>&gt; | <code>Partial</code>&lt;<code>V</code>&gt;</p><hr><h3 id="pick" tabindex="-1">pick <a class="header-anchor" href="#pick" aria-label="Permalink to &quot;pick&quot;">​</a></h3><p>▸ <strong>pick</strong>&lt;<code>V</code>, <code>K</code>&gt;(<code>object</code>, <code>predicate</code>, <code>context?</code>): <code>Pick</code>&lt;<code>V</code>, <code>K</code>&gt; | <code>Partial</code>&lt;<code>V</code>&gt;</p><p>返回一个对象，对象由给定对象中通过<code>predicate</code>真值检测的元素组成。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pick</span><span style="color:#E1E4E8;">({ name: </span><span style="color:#9ECBFF;">&#39;moe&#39;</span><span style="color:#E1E4E8;">, age: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, userid: </span><span style="color:#9ECBFF;">&#39;moe1&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;age&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">age</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">pick</span><span style="color:#E1E4E8;">({ name: </span><span style="color:#9ECBFF;">&#39;moe&#39;</span><span style="color:#E1E4E8;">, age: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, userid: </span><span style="color:#9ECBFF;">&#39;moe1&#39;</span><span style="color:#E1E4E8;"> }, [</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;age&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;moe&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">age</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">pick</span><span style="color:#E1E4E8;">({ name: </span><span style="color:#9ECBFF;">&#39;moe&#39;</span><span style="color:#E1E4E8;">, age: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, userid: </span><span style="color:#9ECBFF;">&#39;moe1&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">object</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isNumber</span><span style="color:#E1E4E8;">(value)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">age</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pick</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&#39;moe&#39;</span><span style="color:#24292E;">, age: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, userid: </span><span style="color:#032F62;">&#39;moe1&#39;</span><span style="color:#24292E;"> }, </span><span style="color:#032F62;">&#39;age&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">age</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">pick</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&#39;moe&#39;</span><span style="color:#24292E;">, age: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, userid: </span><span style="color:#032F62;">&#39;moe1&#39;</span><span style="color:#24292E;"> }, [</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;age&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;moe&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">age</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">pick</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&#39;moe&#39;</span><span style="color:#24292E;">, age: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, userid: </span><span style="color:#032F62;">&#39;moe1&#39;</span><span style="color:#24292E;"> }, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#E36209;">object</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isNumber</span><span style="color:#24292E;">(value)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">age</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;"> }</span></span></code></pre></div><h4 id="type-parameters-8" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-8" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">extends <a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>, <code>V</code>&gt;</td></tr><tr><td style="text-align:left;"><code>K</code></td><td style="text-align:left;">extends <code>string</code></td></tr></tbody></table><h4 id="parameters-18" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-18" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">给定对象</td></tr><tr><td style="text-align:left;"><code>predicate</code></td><td style="text-align:left;"><code>K</code> | <code>ObjectIterator</code>&lt;<code>TypeOfDictionary</code>&lt;<code>V</code>&gt;, <code>boolean</code>&gt; | <code>K</code>[]</td><td style="text-align:left;">谓语迭代器函数，通过 iteratee 进行转换，以简化速记语法</td></tr><tr><td style="text-align:left;"><code>context?</code></td><td style="text-align:left;"><code>unknown</code></td><td style="text-align:left;">上下文对象，若传递，则作为谓语迭代器函数的执行上下文 this</td></tr></tbody></table><h4 id="returns-18" tabindex="-1">Returns <a class="header-anchor" href="#returns-18" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Pick</code>&lt;<code>V</code>, <code>K</code>&gt; | <code>Partial</code>&lt;<code>V</code>&gt;</p><hr><h3 id="property" tabindex="-1">property <a class="header-anchor" href="#property" aria-label="Permalink to &quot;property&quot;">​</a></h3><p>▸ <strong>property</strong>(<code>path</code>): (<code>obj</code>: <a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;) =&gt; <code>undefined</code> | <a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</p><p>返回一个函数，该函数将返回指定对象的给定检索路径属性（先路径后对象）。<code>path</code>可以指定为简单的<code>key</code>，或者指定为对象键或索引键组成的数组，用于深度属性萃取。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stooge</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { name: </span><span style="color:#9ECBFF;">&#39;moe&#39;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;moe&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">)(stooge)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stooges</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { moe: { fears: { worst: </span><span style="color:#9ECBFF;">&#39;Spiders&#39;</span><span style="color:#E1E4E8;"> } }, curly: { fears: { worst: </span><span style="color:#9ECBFF;">&#39;Moe&#39;</span><span style="color:#E1E4E8;"> } } }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">curlsWorstFear</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;curly&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;fears&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;worst&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#B392F0;">curlsWorstFear</span><span style="color:#E1E4E8;">(stooges)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Moe&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">stooge</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&#39;moe&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#032F62;">&#39;moe&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">)(stooge)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">stooges</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { moe: { fears: { worst: </span><span style="color:#032F62;">&#39;Spiders&#39;</span><span style="color:#24292E;"> } }, curly: { fears: { worst: </span><span style="color:#032F62;">&#39;Moe&#39;</span><span style="color:#24292E;"> } } }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">curlsWorstFear</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;curly&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;fears&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;worst&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#6F42C1;">curlsWorstFear</span><span style="color:#24292E;">(stooges)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Moe&#39;</span></span></code></pre></div><h4 id="parameters-19" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-19" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>path</code></td><td style="text-align:left;"><code>unknown</code></td><td style="text-align:left;">给定检索路径</td></tr></tbody></table><h4 id="returns-19" tabindex="-1">Returns <a class="header-anchor" href="#returns-19" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (<code>obj</code>): <code>undefined</code> | <a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</p><h5 id="parameters-20" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-20" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>obj</code></td><td style="text-align:left;"><a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</td></tr></tbody></table><h5 id="returns-20" tabindex="-1">Returns <a class="header-anchor" href="#returns-20" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>undefined</code> | <a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</p><hr><h3 id="propertyof" tabindex="-1">propertyOf <a class="header-anchor" href="#propertyof" aria-label="Permalink to &quot;propertyOf&quot;">​</a></h3><p>▸ <strong>propertyOf</strong>(<code>object</code>): (<code>path</code>: <code>string</code> | <code>number</code> | (<code>string</code> | <code>number</code>)[]) =&gt; <code>any</code></p><p>返回一个函数，该函数返回指定检索路径属性给定对象的值（先对象后路径），<code>property</code>的反函数。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stooge</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { name: </span><span style="color:#9ECBFF;">&#39;moe&#39;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#B392F0;">propertyOf</span><span style="color:#E1E4E8;">(stooge)(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;moe&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">stooge</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&#39;moe&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#6F42C1;">propertyOf</span><span style="color:#24292E;">(stooge)(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;moe&#39;</span></span></code></pre></div><h4 id="parameters-21" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-21" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>&gt;</td><td style="text-align:left;">给定对象</td></tr></tbody></table><h4 id="returns-21" tabindex="-1">Returns <a class="header-anchor" href="#returns-21" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>fn</code></p><p>▸ (<code>path</code>): <code>any</code></p><h5 id="parameters-22" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-22" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>path</code></td><td style="text-align:left;"><code>string</code> | <code>number</code> | (<code>string</code> | <code>number</code>)[]</td></tr></tbody></table><h5 id="returns-22" tabindex="-1">Returns <a class="header-anchor" href="#returns-22" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>any</code></p><hr><h3 id="tap" tabindex="-1">tap <a class="header-anchor" href="#tap" aria-label="Permalink to &quot;tap&quot;">​</a></h3><p>▸ <strong>tap</strong>&lt;<code>V</code>&gt;(<code>object</code>, <code>interceptor</code>): <code>V</code></p><p>使用给定对象作为参数调用给定函数后返回给定对象。 这种方法的主要意图是作为函数链式调用的一环, 为了对此对象执行操作并返回对象本身。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">chain</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(alert)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> num })</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// [2, 200] (alerted)</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">40000</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">chain</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">num</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(alert)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">num</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> num })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// [2, 200] (alerted)</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">40000</span><span style="color:#24292E;">]</span></span></code></pre></div><h4 id="type-parameters-9" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-9" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>V</code></td></tr></tbody></table><h4 id="parameters-23" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-23" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">给定对象</td></tr><tr><td style="text-align:left;"><code>interceptor</code></td><td style="text-align:left;"><a href="./../interfaces/types.Func.html"><code>Func</code></a>&lt;<code>any</code>&gt;</td><td style="text-align:left;">给定函数</td></tr></tbody></table><h4 id="returns-23" tabindex="-1">Returns <a class="header-anchor" href="#returns-23" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>V</code></p><hr><h3 id="values" tabindex="-1">values <a class="header-anchor" href="#values" aria-label="Permalink to &quot;values&quot;">​</a></h3><p>▸ <strong>values</strong>&lt;<code>V</code>&gt;(<code>object</code>): <code>TypeOfDictionary</code>&lt;<code>V</code>&gt;[]</p><p>推荐原生：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values" target="_blank" rel="noreferrer">Object.values</a>。 返回一个数组，数组由给定对象自有可枚举字符串键属性值组成。</p><p><strong><code>Example</code></strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">({ one: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, two: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, three: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">values</span><span style="color:#24292E;">({ one: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, two: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, three: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span></code></pre></div><h4 id="type-parameters-10" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-10" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">extends <a href="./../interfaces/types.Dictionary.html"><code>Dictionary</code></a>&lt;<code>any</code>, <code>V</code>&gt;</td></tr></tbody></table><h4 id="parameters-24" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-24" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>object</code></td><td style="text-align:left;"><code>V</code></td><td style="text-align:left;">给定对象</td></tr></tbody></table><h4 id="returns-24" tabindex="-1">Returns <a class="header-anchor" href="#returns-24" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>TypeOfDictionary</code>&lt;<code>V</code>&gt;[]</p>`,258),n=[o];function p(r,c,d,y,i,E){return e(),a("div",null,n)}const u=s(l,[["render",p]]);export{g as __pageData,u as default};
